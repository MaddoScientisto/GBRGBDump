@page "/processing"
@using System.Diagnostics
@using GBRGBDump.Web.Shared.Services
@using GBTools.Common
@using GBTools.Bootstrapper
@using Microsoft.AspNetCore.Components.Web
@using System.Collections.ObjectModel
@inject ImageTransformService ImageTransformService
@inject IFileDialogService FileDialogService
@inject NavigationManager Navigation
@inject ISettingsService SettingsService
@inject GBRGBDump.Web.Shared.Services.IFileSystemService FileSystemService
@inject IExecutionService ExecutionService
@inject ImageProcessingService ImageProcessingService

<p>Loading from @Model!.InputPath into @Model!.OutputPath</p>
@if (Model!.PreScript.Enabled)
{
    <p>Scripts enabled: @Model!.PreScript.Path @Model!.PreScript.Arguments executing in @Model!.PreScript.RunLocation</p>
}

<Button Color="Color.Danger" Clicked="Exececute" Disabled="@_isProcessing">Execute</Button>


<Button Color="Color.Primary" Clicked="ExecuteNew">Process with new Method</Button>

<Button Color="Color.Primary" Clicked="DoAutoRgbMerge" >Auto RGB Merge</Button>

@if (_isProcessing)
{
    <SpinKit Type="SpinKitType.Circle"></SpinKit>
}

<p>@_lastReport</p>

@foreach (var output in OutputLines)
{
    <p>@output</p>
}

@foreach (var error in ErrorLines)
{
    <p style="color: red">@error</p>
}


<Gallery @ref="galleryRef" @bind-Images="_images"></Gallery>

@code
{
    [Inject] public IModalService ModalService { get; set; }
    [Inject] INotificationService NotificationService { get; set; }

    private Gallery galleryRef;
    ObservableCollection<GbImageContainer> _images = [];

    [SupplyParameterFromForm] private SettingsModel? Model { get; set; }

    protected override void OnInitialized()
    {
        Model ??= SettingsService.LoadSettings() ?? new()
        {
            // Set defaults here
            ChannelOrder = ChannelOrder.Sequential,
            AverageType = AverageTypes.Normal
        };

        ExecutionService.OutputReceived += (sender, output) =>
        {
            InvokeAsync(() =>
            {
                OutputLines.Add(output);
                StateHasChanged();
            });
        };

        ExecutionService.ErrorReceived += (sender, error) =>
        {
            InvokeAsync(() =>
            {
                ErrorLines.Add(error);
                StateHasChanged();
            });
        };
    }


    ObservableCollection<string> OutputLines { get; set; } = new ObservableCollection<string>();
    ObservableCollection<string> ErrorLines { get; set; } = new ObservableCollection<string>();

    private bool? cartIsJp;
    private string _lastReport = string.Empty;

    private bool _isProcessing = false;

    private async Task ExecuteNew()
    {
        OutputLines.Clear();
        ErrorLines.Clear();

        await InvokeAsync(() => StateHasChanged());

        try
        {
            _isProcessing = true;

            // TODO: Prescript

            var importParams = new ImportSavOptions()
            {
                ImportLastSeen = false,
                ImportDeleted = true,
                ForceMagicCheck = false,
                AverageType = Model!.AverageType,
                AebStep = 2,
                BanksToProcess = -1,
                CartIsJp = cartIsJp ?? false,
                ChannelOrder = Model.ChannelOrder,
                RgbMerge = true
            };

            var progress = new Progress<ProgressInfo>(ReportProgress);

            _lastReport = String.Empty;

            Stopwatch s = new Stopwatch();
            s.Start();

            var result = await Task.Run(() =>
                ImageTransformService.TransformSavToBase64ArrayAsync(Model.InputPath, importParams));

            s.Stop();

            _lastReport += $"/r/n{s.Elapsed:g}";

            _images = new ObservableCollection<GbImageContainer>(result);
        }
        catch (Exception e)
        {
            ErrorLines.Add(e.ToString());
            Debug.WriteLine(e);
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task Exececute()
    {
        OutputLines.Clear();
        ErrorLines.Clear();

        await InvokeAsync(() => StateHasChanged());

        try
        {
            _isProcessing = true;
            // Execute Script
            if (Model!.PreScript.Enabled)
            {
                var prescript = Model!.PreScript;

                var res = await ExecutionService.RunScriptAsync(prescript.Path, prescript.RunLocation, prescript.Arguments);

                if (!res && prescript.FailOnError)
                {
                    Debug.WriteLine("Script failed");
                    _lastReport = "Script has failed";
                    return;
                }

                Model.InputPath = OutputLines.Last();

                OutputLines.Add("Done with script!");

                await InvokeAsync(() => StateHasChanged());
            }

            if (string.IsNullOrWhiteSpace(Model!.InputPath) || string.IsNullOrWhiteSpace(Model!.OutputPath))
            {
                ErrorLines.Add("Please specify both input and output paths");
                return;
            }

            ;

            var outputSubFolder = FileSystemService.MakeOutputSubFolder(Model!.InputPath, Model!.OutputPath);

            FileSystemService.CreateDirectory(outputSubFolder);

            var importParams = new ImportSavOptions()
            {
                ImportLastSeen = false,
                ImportDeleted = true,
                ForceMagicCheck = false,
                AverageType = Model!.AverageType,
                AebStep = 2,
                BanksToProcess = -1,
                CartIsJp = cartIsJp ?? false,
                ChannelOrder = Model.ChannelOrder,
                RgbMerge = true
            };

            var progress = new Progress<ProgressInfo>(ReportProgress);

            _lastReport = String.Empty;

            Stopwatch s = new Stopwatch();
            s.Start();

            var result = await Task.Run(() =>
                ImageTransformService.TransformSav(Model.InputPath, outputSubFolder, importParams, progress));

            s.Stop();

            _lastReport += $"/r/n{s.Elapsed:g}";
        }
        catch (Exception e)
        {
            ErrorLines.Add(e.ToString());
            Debug.WriteLine(e);
        }
        finally
        {
            _isProcessing = false;
        }
    }


    private void NavigateToConfig()
    {
        Navigation.NavigateTo("/settings");
    }

    private void ReportProgress(ProgressInfo value)
    {
        _lastReport = $"{value.CurrentImageName}";
        StateHasChanged();
    }

    private async Task DoAutoRgbMerge()
    {
        await ModalService.Show<AutoRgbMergeModal>(_builder =>
        {
            _builder.Add(_modal => _modal.OnSuccess, async (channelOrder, averageType, aebStep) =>
            {
                // do work here

                // var imagesToMerge = _images.GroupBy(x => x.Bank);
                var elements = ((aebStep * 2) + 1) * 3;

                var imagseToMerge = _images
                    .Select((item, index) => new { item, index })
                    .GroupBy(x => x.index / elements)
                    .Select(g => g.Select(x => x.item).ToList())
                    .ToList();

                var date = DateTime.Now;

                int groupIndex = 0;
                foreach (var group in imagseToMerge)
                {
                    var mergedImages = await ImageProcessingService.RGBMergeAsync(group.Select(img => img.Base64Png).ToList(), channelOrder);

                    int imgIndex = 0;

                    var createdGroup = new List<GbImageContainer>();

                    foreach (var mergedImage in mergedImages)
                    {
                        createdGroup.Add(new GbImageContainer()
                        {
                            Base64Png = mergedImage,
                                Id = _images.Count, // TODO: Less naive id implementation
                                Name = $"{date:s} {_images.Count} {groupIndex} RGB {imgIndex}"
                        });
                        // Note: ids may be wrong
                        imgIndex++;
                    }

                    if (averageType is AverageTypes.Normal or AverageTypes.FullBank)
                    {
                        var averagedImage = await ImageProcessingService.AverageAsync(createdGroup.Select(x => x.Base64Png).ToList());


                        var id = _images.Count + createdGroup.Count;
                        createdGroup.Add(new GbImageContainer()
                        {
                            Base64Png = averagedImage,
                            Id = id,
                            Name = $"{createdGroup.First().Name} HDR {id}"
                        });
                    }

                    foreach (var image in createdGroup)
                    {
                        _images.Add(image);
                    }

                    groupIndex++;
                }

                await NotificationService.Success($"RGB Images created");
            });
        });
    }

    // private RenderFragment RGBOptionsFragment => __builder =>
    // {
    //     <Paragraph>yooooo</Paragraph>
    // };

    
}